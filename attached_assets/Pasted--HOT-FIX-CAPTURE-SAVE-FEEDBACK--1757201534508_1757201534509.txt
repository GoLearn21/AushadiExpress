#########################  HOT-FIX — CAPTURE → SAVE & FEEDBACK  ####################################
Why
───
• Live camera fallback to file-picker now works, but the screen shows “Camera not available”
  because the `<Camera>` element unmounts on web and no “Take Photo” was rendered.
• No captured image is persisted or applied to stock / sales.
• POS & Receive-Stock buttons still drop into the same “not available” state.

Goals
─────
1. Absolutely **always** give the user a way to pick / shoot a photo.
2. Persist each capture in the correct local table:
   ─ barcode  → add line item to current POS bill  
   ─ invoice  → create receive_invoice row **and** auto-increment stock  
   ─ prescription → prescriptions table
3. Toast “Saved ✅” after every successful capture.
4. Back arrow returns cleanly; no “camera not available” message remains.

Patch
─────
A  DB – add three tiny tables (if not present)
----------------------------------------------
*File* `backend/agent/schema.sql`  **append**
```sql
CREATE TABLE IF NOT EXISTS captures(
  id TEXT PRIMARY KEY, path TEXT, mode TEXT, owner_id TEXT, ts TEXT
);
CREATE TABLE IF NOT EXISTS prescriptions(
  id TEXT PRIMARY KEY, img_id TEXT, patient TEXT DEFAULT '', ts TEXT
);
CREATE TABLE IF NOT EXISTS receive_invoices(
  id TEXT PRIMARY KEY, img_id TEXT, vendor TEXT DEFAULT '', ts TEXT
);
B Shared toast helper
File src/ui/Toast.tsx

tsx
Copy code
import React, { useEffect } from 'react';
import { View, Text, Animated } from 'react-native';

export const Toast = ({msg}:{msg:string})=>{
  const fade = new Animated.Value(0);
  useEffect(()=>{ Animated.timing(fade,{toValue:1,duration:300,useNativeDriver:true}).start(()=>{
    setTimeout(()=>Animated.timing(fade,{toValue:0,duration:300,useNativeDriver:true}).start(),1200);
  });},[]);
  return (
    <Animated.View style={{opacity:fade,position:'absolute',bottom:80,left:0,right:0,
      alignItems:'center'}}>
      <View className="bg-green rounded-xl px-4 py-2">
        <Text className="text-white">{msg}</Text>
      </View>
    </Animated.View>);
};
C cameraService helper (single entry-point)
File src/services/cameraService.ts

ts
Copy code
import { Platform } from 'react-native';
import { Camera } from 'expo-camera';
import * as ImagePicker from 'expo-image-picker';

export async function openCameraOrPicker():Promise<string>{
  const { status } = await Camera.requestCameraPermissionsAsync();
  if(status === 'granted') return 'camera';          // caller mounts <Camera/>
  // web or denied → immediate picker
  const res = await ImagePicker.launchImageLibraryAsync({mediaTypes:ImagePicker.MediaTypeOptions.Images});
  if(res.canceled) throw new Error('CANCEL');
  return res.assets[0].uri;
}
D QuickCaptureScreen.tsx (replace file)
tsx
Copy code
import React, { useEffect, useRef, useState } from 'react';
import { View, Button, Image } from 'react-native';
import { Camera } from 'expo-camera';
import { openCameraOrPicker } from '../services/cameraService';
import { Toast } from '../ui/Toast';
import db from '../db';
import { addBillLine } from '../logic/pos';

export default function QuickCapture({route,navigation}){
  const { mode } = route.params;          // 'barcode' | 'invoice' | 'prescription'
  const camRef = useRef<Camera>(null);
  const [cam, setCam] = useState(false);
  const [confirmMsg, setMsg] = useState('');

  useEffect(()=>{ (async()=>{
    try{
      const res = await openCameraOrPicker();
      if(res==='camera') setCam(true);
      else { await persistShot(res); navigation.goBack(); }
    }catch{ navigation.goBack(); }
  })(); },[]);

  async function persistShot(uri:string, code?:string){
    const id = crypto.randomUUID();
    await db.write(async ()=>{
      await db.collections.get('captures').create(r=>{
        r._raw.id=id; r.path=uri; r.mode=mode; r.owner_id='ME'; r.ts=new Date().toISOString();
      });
      if(mode==='invoice'){
        await db.collections.get('receive_invoices').create(r=>{
          r._raw.id=crypto.randomUUID(); r.img_id=id; r.ts=new Date().toISOString();
        });
        // naive stock bump: +1 each item (demo only)
      }
      if(mode==='prescription'){
        await db.collections.get('prescriptions').create(r=>{
          r._raw.id=crypto.randomUUID(); r.img_id=id; r.ts=new Date().toISOString();
        });
      }
      if(mode==='barcode' && code){
        addBillLine(code);
      }
    });
    setMsg('Saved ✅');
  }

  const handleBarcode = ({data}:{data:string})=>persistShot(`BAR:${data}`,data);

  const take = async()=>{
    const p = await camRef.current.takePictureAsync({quality:0.8});
    await persistShot(p.uri);
    navigation.goBack();
  };

  return (
    <View style={{flex:1,backgroundColor:'#000'}}>
      {cam && <Camera
        ref={camRef}
        style={{flex:1}}
        onBarCodeScanned={mode==='barcode'?handleBarcode:undefined}
      />}
      {cam && mode!=='barcode' &&
        <Button title="Take Photo" onPress={take} />}
      {!!confirmMsg && <Toast msg={confirmMsg}/>}
    </View>);
}
E Home FAB & POS FAB now share same navigator
Home FAB:

tsx
Copy code
onPress={()=>ActionSheet.show(
  ['Barcode (Quick Bill)','Invoice (Receive Stock)','Prescription (Rx)','Cancel'],
  i=>{
    if(i===0) nav.push('/capture',{mode:'barcode'});
    if(i===1) nav.push('/capture',{mode:'invoice'});
    if(i===2) nav.push('/capture',{mode:'prescription'});
  })}
POS FAB: nav.push('/capture',{mode:'barcode'});
Receive-Stock » “Scan Invoice”: nav.push('/capture',{mode:'invoice'});

F Back navigation (one-liner)
Every header Back icon:

tsx
Copy code
import { useNavigation } from '@react-navigation/native';
const nav = useNavigation();
<IconButton icon="arrow-back" onPress={()=>nav.goBack()}/>
G Remove “camera not available” placeholder
Delete the black placeholder message block from any previous capture screen.

Smoke checklist
──────────────
✓ Home FAB → choose type → live camera (or picker) appears immediately.
✓ Receive-Stock » Scan Invoice opens camera the same way (no extra confirmation needed).
✓ POS camera opens scanner directly.
✓ After photo or barcode scan, toast “Saved ✅” flashes, data row created in correct table,
and navigation pops.
✓ No more “camera not available” message anywhere.

Begin.
###############################