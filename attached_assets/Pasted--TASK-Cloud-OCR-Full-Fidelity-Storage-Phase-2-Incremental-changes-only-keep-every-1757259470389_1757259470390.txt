### üõ† TASK: Cloud OCR + Full-Fidelity Storage  (Phase Œ≤-2)

> Incremental changes only ‚Äì keep everything from Phase Œ≤ unless overwritten here.

-----------------------------------------------------------------
## 0 ¬∑ Why this patch?
-----------------------------------------------------------------
* The user supplied a real Indian tax-invoice image (see `/mnt/data/31f55fe3-‚Ä¶.png`).
* We must **persist ALL textual content** returned by GPT-4o-mini Vision,  
  plus a concise **modelSummary**, so auditors can compare AI output to the
  original image at any time.
* The JSON schema therefore expands.

-----------------------------------------------------------------
## 1 ¬∑ Backend changes  (/src/server/)
-----------------------------------------------------------------
### 1.1  New extraction prompt
Replace the system prompt in `/services/ocr.ts` with:

You are a precise OCR + information extractor.

Read the receipt/invoice exactly.

Return ONLY valid JSON with these keys:
{
"docType": "invoice" | "bill" | "prescription" | "other",
"rawText": "<COMPLETE text with line-breaks>",
"modelSummary": "<‚â§150-word natural-language summary>",
"header": { "supplier":‚Ä¶, "buyer":‚Ä¶, "docNo":‚Ä¶, "gstin":‚Ä¶, "date":‚Ä¶ },
"lineItems":[{ "name":‚Ä¶, "qty":‚Ä¶, "mrp":‚Ä¶, "rate":‚Ä¶, "gstPct":‚Ä¶, "amount":‚Ä¶ }],
"totals": { "taxable":‚Ä¶, "cgst":‚Ä¶, "sgst":‚Ä¶, "igst":‚Ä¶, "net":‚Ä¶ }
}
Do NOT wrap in markdown, no extra keys.

yaml
Copy code

### 1.2  MongoDB schema update (`/models/document.ts`)
```ts
export interface Document {
  _id         : ObjectId;
  enterpriseId: string;
  docType     : string;
  fileUrl     : string;
  rawText     : string;       // NEW ‚Äì entire OCR dump
  modelSummary: string;       // NEW ‚Äì ‚â§150 words
  header      : Header;
  lineItems   : LineItem[];
  totals      : Totals;
  createdAt   : Date;
}
Use db.documents.createIndex({ enterpriseId:1, "header.supplier":1, createdAt:-1 }).

1.3 Storage flow
Upload image ‚ûú keep S3/local logic.

Call GPT-4o-mini Vision ‚ûú receive JSON.

Validate (zod) + insert into Mongo (rawText, modelSummary, etc.).

Emit change over sync endpoint so Pouch/Watermelon replicate.

2 ¬∑ Local device storage
Images still saved under ‚Ä¶/invoices/, ‚Ä¶/bills/, ‚Ä¶/prescriptions/.

New LiteFS table (RN) / Dexie store (Web):

ts
Copy code
{ _id, fileUri, rawText, modelSummary }
linked by _id to documents replica ‚Äì makes ‚Äúopen original‚Äù easy offline.

3 ¬∑ Agent update
pharma_intelligence_agent now has three memory tiers:

modelSummary (fast path)

rawText (fallback on edge cases)

Live vector DB (Atlas) ‚Äì unchanged

If user asks ‚Äúsummarise last month‚Äôs invoices‚Äù the agent streams over
all modelSummary rows for that period and composes the answer.

4 ¬∑ Reports tab autoload
/reports/receiving page queries Mongo (or local replica) for
docType:"invoice" ‚Üí displays header & totals table.

XLS/PDF export uses the same query so GST filings match stored data.

5 ¬∑ Perf & audit logging
Keep existing timestamp logs.

Add ocrDurationMs and mongoWriteMs to INSERT log.

6 ¬∑ Acceptance criteria
Upload the provided image.

API returns 201 & timestamps; rawText contains every visible word.

modelSummary ‚â§150 words, human-readable.

Toggle offline ‚Üí open Reports ‚ûú invoice visible, image matches data.

Ask assistant:

‚ÄúWhat is the GSTIN on invoice WS 2453?‚Äù ‚Üí agent answers from header.

‚ÄúSummarise stock received this quarter‚Äù ‚Üí agent aggregates modelSummary.

Export CSV from Reports ‚Äì totals align with document.

Commit:

scss
Copy code
feat(doc-fullstore): save rawText + modelSummary, update agent & reports